package org.chappyGolf.model.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

import org.chappyGolf.model.cayenne.Reservation;

/**
 * Class _Payment was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Payment extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "id";

    public static final NumericProperty<Long> AMOUNT_CENTS = PropertyFactory.createNumeric("amountCents", Long.class);
    public static final DateProperty<LocalDateTime> CREATED_AT = PropertyFactory.createDate("createdAt", LocalDateTime.class);
    public static final StringProperty<String> SQUARE_PAYMENT_ID = PropertyFactory.createString("squarePaymentId", String.class);
    public static final StringProperty<String> STATUS = PropertyFactory.createString("status", String.class);
    public static final EntityProperty<Reservation> RESERVATION = PropertyFactory.createEntity("reservation", Reservation.class);

    protected long amountCents;
    protected LocalDateTime createdAt;
    protected String squarePaymentId;
    protected String status;

    protected Object reservation;

    public void setAmountCents(long amountCents) {
        beforePropertyWrite("amountCents", this.amountCents, amountCents);
        this.amountCents = amountCents;
    }

    public long getAmountCents() {
        beforePropertyRead("amountCents");
        return this.amountCents;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        beforePropertyWrite("createdAt", this.createdAt, createdAt);
        this.createdAt = createdAt;
    }

    public LocalDateTime getCreatedAt() {
        beforePropertyRead("createdAt");
        return this.createdAt;
    }

    public void setSquarePaymentId(String squarePaymentId) {
        beforePropertyWrite("squarePaymentId", this.squarePaymentId, squarePaymentId);
        this.squarePaymentId = squarePaymentId;
    }

    public String getSquarePaymentId() {
        beforePropertyRead("squarePaymentId");
        return this.squarePaymentId;
    }

    public void setStatus(String status) {
        beforePropertyWrite("status", this.status, status);
        this.status = status;
    }

    public String getStatus() {
        beforePropertyRead("status");
        return this.status;
    }

    public void setReservation(Reservation reservation) {
        setToOneTarget("reservation", reservation, true);
    }

    public Reservation getReservation() {
        return (Reservation)readProperty("reservation");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "amountCents":
                return this.amountCents;
            case "createdAt":
                return this.createdAt;
            case "squarePaymentId":
                return this.squarePaymentId;
            case "status":
                return this.status;
            case "reservation":
                return this.reservation;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "amountCents":
                this.amountCents = val == null ? 0 : (long)val;
                break;
            case "createdAt":
                this.createdAt = (LocalDateTime)val;
                break;
            case "squarePaymentId":
                this.squarePaymentId = (String)val;
                break;
            case "status":
                this.status = (String)val;
                break;
            case "reservation":
                this.reservation = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.amountCents);
        out.writeObject(this.createdAt);
        out.writeObject(this.squarePaymentId);
        out.writeObject(this.status);
        out.writeObject(this.reservation);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.amountCents = in.readLong();
        this.createdAt = (LocalDateTime)in.readObject();
        this.squarePaymentId = (String)in.readObject();
        this.status = (String)in.readObject();
        this.reservation = in.readObject();
    }

}
