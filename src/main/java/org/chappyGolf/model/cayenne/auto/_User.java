package org.chappyGolf.model.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

import org.chappyGolf.model.cayenne.Reservation;

/**
 * Class _User was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _User extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "id";

    public static final DateProperty<LocalDateTime> CREATED_AT = PropertyFactory.createDate("createdAt", LocalDateTime.class);
    public static final StringProperty<String> EMAIL = PropertyFactory.createString("email", String.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final ListProperty<Reservation> RESERVATIONSS = PropertyFactory.createList("reservationss", Reservation.class);

    protected LocalDateTime createdAt;
    protected String email;
    protected String name;

    protected Object reservationss;

    public void setCreatedAt(LocalDateTime createdAt) {
        beforePropertyWrite("createdAt", this.createdAt, createdAt);
        this.createdAt = createdAt;
    }

    public LocalDateTime getCreatedAt() {
        beforePropertyRead("createdAt");
        return this.createdAt;
    }

    public void setEmail(String email) {
        beforePropertyWrite("email", this.email, email);
        this.email = email;
    }

    public String getEmail() {
        beforePropertyRead("email");
        return this.email;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void addToReservationss(Reservation obj) {
        addToManyTarget("reservationss", obj, true);
    }

    public void removeFromReservationss(Reservation obj) {
        removeToManyTarget("reservationss", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Reservation> getReservationss() {
        return (List<Reservation>)readProperty("reservationss");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "createdAt":
                return this.createdAt;
            case "email":
                return this.email;
            case "name":
                return this.name;
            case "reservationss":
                return this.reservationss;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "createdAt":
                this.createdAt = (LocalDateTime)val;
                break;
            case "email":
                this.email = (String)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "reservationss":
                this.reservationss = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.createdAt);
        out.writeObject(this.email);
        out.writeObject(this.name);
        out.writeObject(this.reservationss);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.createdAt = (LocalDateTime)in.readObject();
        this.email = (String)in.readObject();
        this.name = (String)in.readObject();
        this.reservationss = in.readObject();
    }

}
