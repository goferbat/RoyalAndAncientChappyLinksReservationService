package org.chappyGolf.model.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.PropertyFactory;

import org.chappyGolf.model.cayenne.Payment;
import org.chappyGolf.model.cayenne.TeeTime;
import org.chappyGolf.model.cayenne.User;

/**
 * Class _Reservation was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Reservation extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "id";

    public static final DateProperty<LocalDateTime> CREATED_AT = PropertyFactory.createDate("createdAt", LocalDateTime.class);
    public static final ListProperty<Payment> PAYMENTSS = PropertyFactory.createList("paymentss", Payment.class);
    public static final EntityProperty<TeeTime> TEE_TIME = PropertyFactory.createEntity("teeTime", TeeTime.class);
    public static final EntityProperty<User> USER = PropertyFactory.createEntity("user", User.class);

    protected LocalDateTime createdAt;

    protected Object paymentss;
    protected Object teeTime;
    protected Object user;

    public void setCreatedAt(LocalDateTime createdAt) {
        beforePropertyWrite("createdAt", this.createdAt, createdAt);
        this.createdAt = createdAt;
    }

    public LocalDateTime getCreatedAt() {
        beforePropertyRead("createdAt");
        return this.createdAt;
    }

    public void addToPaymentss(Payment obj) {
        addToManyTarget("paymentss", obj, true);
    }

    public void removeFromPaymentss(Payment obj) {
        removeToManyTarget("paymentss", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Payment> getPaymentss() {
        return (List<Payment>)readProperty("paymentss");
    }

    public void setTeeTime(TeeTime teeTime) {
        setToOneTarget("teeTime", teeTime, true);
    }

    public TeeTime getTeeTime() {
        return (TeeTime)readProperty("teeTime");
    }

    public void setUser(User user) {
        setToOneTarget("user", user, true);
    }

    public User getUser() {
        return (User)readProperty("user");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "createdAt":
                return this.createdAt;
            case "paymentss":
                return this.paymentss;
            case "teeTime":
                return this.teeTime;
            case "user":
                return this.user;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "createdAt":
                this.createdAt = (LocalDateTime)val;
                break;
            case "paymentss":
                this.paymentss = val;
                break;
            case "teeTime":
                this.teeTime = val;
                break;
            case "user":
                this.user = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.createdAt);
        out.writeObject(this.paymentss);
        out.writeObject(this.teeTime);
        out.writeObject(this.user);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.createdAt = (LocalDateTime)in.readObject();
        this.paymentss = in.readObject();
        this.teeTime = in.readObject();
        this.user = in.readObject();
    }

}
