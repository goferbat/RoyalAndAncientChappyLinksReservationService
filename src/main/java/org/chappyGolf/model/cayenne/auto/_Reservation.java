package org.chappyGolf.model.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.chappyGolf.model.cayenne.Payment;
import org.chappyGolf.model.cayenne.TeeTime;
import org.chappyGolf.model.cayenne.TeeTimeTier;
import org.chappyGolf.model.cayenne.Users;

/**
 * Class _Reservation was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Reservation extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "id";

    public static final DateProperty<LocalDateTime> CREATED_AT = PropertyFactory.createDate("createdAt", LocalDateTime.class);
    public static final NumericProperty<Integer> PARTY_SIZE = PropertyFactory.createNumeric("partySize", Integer.class);
    public static final ListProperty<Payment> PAYMENTS = PropertyFactory.createList("payments", Payment.class);
    public static final EntityProperty<TeeTime> TEE_TIME = PropertyFactory.createEntity("teeTime", TeeTime.class);
    public static final EntityProperty<TeeTimeTier> TIER = PropertyFactory.createEntity("tier", TeeTimeTier.class);
    public static final EntityProperty<Users> USER = PropertyFactory.createEntity("user", Users.class);

    protected LocalDateTime createdAt;
    protected int partySize;

    protected Object payments;
    protected Object teeTime;
    protected Object tier;
    protected Object user;

    public void setCreatedAt(LocalDateTime createdAt) {
        beforePropertyWrite("createdAt", this.createdAt, createdAt);
        this.createdAt = createdAt;
    }

    public LocalDateTime getCreatedAt() {
        beforePropertyRead("createdAt");
        return this.createdAt;
    }

    public void setPartySize(int partySize) {
        beforePropertyWrite("partySize", this.partySize, partySize);
        this.partySize = partySize;
    }

    public int getPartySize() {
        beforePropertyRead("partySize");
        return this.partySize;
    }

    public void addToPayments(Payment obj) {
        addToManyTarget("payments", obj, true);
    }

    public void removeFromPayments(Payment obj) {
        removeToManyTarget("payments", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Payment> getPayments() {
        return (List<Payment>)readProperty("payments");
    }

    public void setTeeTime(TeeTime teeTime) {
        setToOneTarget("teeTime", teeTime, true);
    }

    public TeeTime getTeeTime() {
        return (TeeTime)readProperty("teeTime");
    }

    public void setTier(TeeTimeTier tier) {
        setToOneTarget("tier", tier, true);
    }

    public TeeTimeTier getTier() {
        return (TeeTimeTier)readProperty("tier");
    }

    public void setUser(Users user) {
        setToOneTarget("user", user, true);
    }

    public Users getUser() {
        return (Users)readProperty("user");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "createdAt":
                return this.createdAt;
            case "partySize":
                return this.partySize;
            case "payments":
                return this.payments;
            case "teeTime":
                return this.teeTime;
            case "tier":
                return this.tier;
            case "user":
                return this.user;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "createdAt":
                this.createdAt = (LocalDateTime)val;
                break;
            case "partySize":
                this.partySize = val == null ? 0 : (int)val;
                break;
            case "payments":
                this.payments = val;
                break;
            case "teeTime":
                this.teeTime = val;
                break;
            case "tier":
                this.tier = val;
                break;
            case "user":
                this.user = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.createdAt);
        out.writeInt(this.partySize);
        out.writeObject(this.payments);
        out.writeObject(this.teeTime);
        out.writeObject(this.tier);
        out.writeObject(this.user);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.createdAt = (LocalDateTime)in.readObject();
        this.partySize = in.readInt();
        this.payments = in.readObject();
        this.teeTime = in.readObject();
        this.tier = in.readObject();
        this.user = in.readObject();
    }

}
