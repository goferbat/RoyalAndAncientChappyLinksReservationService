package org.chappyGolf.model.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.chappyGolf.model.cayenne.Reservation;

/**
 * Class _TeeTime was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _TeeTime extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "id";

    public static final NumericProperty<Integer> CAPACITY = PropertyFactory.createNumeric("capacity", Integer.class);
    public static final DateProperty<LocalDateTime> START_TIME = PropertyFactory.createDate("startTime", LocalDateTime.class);
    public static final ListProperty<Reservation> RESERVATIONSS = PropertyFactory.createList("reservationss", Reservation.class);

    protected int capacity;
    protected LocalDateTime startTime;

    protected Object reservationss;

    public void setCapacity(int capacity) {
        beforePropertyWrite("capacity", this.capacity, capacity);
        this.capacity = capacity;
    }

    public int getCapacity() {
        beforePropertyRead("capacity");
        return this.capacity;
    }

    public void setStartTime(LocalDateTime startTime) {
        beforePropertyWrite("startTime", this.startTime, startTime);
        this.startTime = startTime;
    }

    public LocalDateTime getStartTime() {
        beforePropertyRead("startTime");
        return this.startTime;
    }

    public void addToReservationss(Reservation obj) {
        addToManyTarget("reservationss", obj, true);
    }

    public void removeFromReservationss(Reservation obj) {
        removeToManyTarget("reservationss", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Reservation> getReservationss() {
        return (List<Reservation>)readProperty("reservationss");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "capacity":
                return this.capacity;
            case "startTime":
                return this.startTime;
            case "reservationss":
                return this.reservationss;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "capacity":
                this.capacity = val == null ? 0 : (int)val;
                break;
            case "startTime":
                this.startTime = (LocalDateTime)val;
                break;
            case "reservationss":
                this.reservationss = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeInt(this.capacity);
        out.writeObject(this.startTime);
        out.writeObject(this.reservationss);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.capacity = in.readInt();
        this.startTime = (LocalDateTime)in.readObject();
        this.reservationss = in.readObject();
    }

}
